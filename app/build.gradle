//apply plugin: 'com.android.library'
apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

apply plugin: 'android-apt'
apply plugin: 'me.tatarka.retrolambda'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    compile 'com.android.support:appcompat-v7:27.1.1'
    compile 'com.android.support:design:27.1.1'
    compile 'com.android.support:recyclerview-v7:27.1.1'
    compile 'com.android.support:cardview-v7:27.1.1'


    compile 'com.cloudpet.base:baserouter:1.0.0'
    compile 'com.cloudpet.ui:commonui:1.1.2'
    compile 'com.cloudpet.ui:themelib:1.2.0'
    compile 'com.supets.lib:maillib:2.2.0'
    compile 'com.supets.lib:jsoneditlib:1.4.0'

    compile 'com.zhy:okhttputils:2.6.2'

    compile 'org.greenrobot:greendao:3.2.0'
    //数据库加密时添加
    compile 'net.zetetic:android-database-sqlcipher:3.5.4'
    //使用数据库升级辅助GreenDaoUpgradleHepler时添加
    compile 'com.github.yuweiguocn:GreenDaoUpgradeHelper:v1.2.0'
    // 搭建Android上的服务器 “实现隔空取物”
    compile "com.jakewharton:butterknife:8.4.0"
    compile "com.jakewharton:butterknife-compiler:8.4.0"
    compile 'com.koushikdutta.async:androidasync:2.2.1'
    compile 'com.jakewharton.timber:timber:4.3.0'
    compile "com.hwangjr.rxbus:rxbus:1.0.5"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            keyAlias
            keyPassword
            storeFile
            storePassword
        }

        debug {
            keyAlias
            keyPassword
            storeFile
            storePassword
        }

    }

    def currentVersionCode = getVersionCode()
    def currentVersionName = getVersionName()

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        applicationId "com.supets.pet.mockui"

        versionCode currentVersionCode
        versionName currentVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {

        debug {
            signingConfig signingConfigs.debug
            zipAlignEnabled true
        }

        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 移除无用的resource文件
            shrinkResources true
        }
    }


lintOptions {
    abortOnError true
}

applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def outputFile = output.outputFile
        // 输出apk名称为supets_localhost_V3.5.0_build110.apk
        def runTasks = gradle.startParameter.taskNames

        if (('assembleDebug' in runTasks)) {
            def  outputFileName  = "Tuzi__${variant.productFlavors[0].name}_V${defaultConfig.versionName}_build${defaultConfig.versionCode}_debug.apk"
            output.outputFile = new File(outputFile.parent, outputFileName)
        } else if (('assembleRelease' in runTasks)) {
            def outputFileName  = "Tuzi__${variant.productFlavors[0].name}_V${defaultConfig.versionName}_build${defaultConfig.versionCode}_release.apk"
            output.outputFile = new File(outputFile.parent, outputFileName)
        } else {
            def outputFileName  = "Tuzi__${variant.productFlavors[0].name}_V${defaultConfig.versionName}_build${defaultConfig.versionCode}.apk"
            output.outputFile = new File(outputFile.parent, outputFileName)
        }
    }
}

android.applicationVariants.all { variant ->
    variant.assemble.doLast {
        variant.outputs.each { output ->
            File file = output.packageApplication.outputFile;
            if (variant.buildType.zipAlignEnabled && file.getName().contains("unaligned")) {
                println "deleting " + file.getName()
                file.delete()
            }
        }

        updateVersionCode()
    }
}


productFlavors {
    localhost {}
}

}


def getVersionCode() {
    def versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['build.number'].toInteger()
        println('Current version code is ' + versionCode.toString())
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def getVersionName() {
    def versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['build.versionName'].toString()
        println('Current version code is ' + versionCode.toString())
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

//数据库版本以及Dao的相关设置
greendao {
    //数据库schema版本
    schemaVersion 7
    //设置DaoMaster DaoSession Dao包名，默认的是bean所在的包名
    daoPackage "com.supets.pet.greendao"
    targetGenDir 'src/main/java'
    //设置DaoMaster DaoSeeeion Dao目录，默认是build/generated/source/greendao
    //targetGenDir 'src/main/greendao'
    //设置true,自动生成测试单元
    //generateTests true
    //设置生成的单元测试目录，默认是src/androidTest/java
    targetGenDirTests 'src/androidTest/java'
}

def updateVersionCode() {

    def runTasks = gradle.startParameter.taskNames

    if (!('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks)) {
        return
    }

    def File versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def currentVersionCode = versionProps['build.number'].toInteger()
        currentVersionCode++
        versionProps['build.number'] = currentVersionCode.toString()
        versionProps.store(versionFile.newWriter(), null)
        println('Updated version code to ' + currentVersionCode.toString())
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

//读取签名配置文件def
def getSigningProperties() {
    def propFile = file('signing.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']

            android.signingConfigs.debug.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.debug.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.debug.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.debug.keyPassword = props['KEY_PASSWORD']

        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }

}